(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{450:function(t,n,s){"use strict";s.r(n);var a=s(1),e=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"闭包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),n("p",[t._v("闭包（Closure）是JavaScript中的一个重要概念，它涉及函数的作用域和变量访问的机制。")]),t._v(" "),n("p",[t._v("简单地说，闭包是指函数能够访问 作用域以外的变量的能力。")]),t._v(" "),n("p",[t._v("在JavaScript中，函数内部可以访问外部函数的变量，而不仅限于全局作用域。当一个函数内部引用了外部函数的变量，并且该函数被返回或传递给其他函数时，就形成了闭包。")]),t._v(" "),n("p",[t._v("闭包具有以下特点：")]),t._v(" "),n("ol",[n("li",[n("p",[n("strong",[t._v("访问外部变量")]),t._v("：闭包允许函数访问其词法作用域外部的变量，即使外部函数已经执行完毕，闭包仍然可以引用这些变量。")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("保持词法环境")]),t._v("：闭包会在内存中持有对其词法环境的引用，这意味着闭包中的变量不会被垃圾回收，直到闭包不再被使用。")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("创建私有变量")]),t._v("：通过闭包，可以创建私有变量，只有内部函数可以访问和修改这些变量，外部无法直接访问。")])])]),t._v(" "),n("p",[t._v("闭包的一个常见应用是在函数内部创建私有变量和函数，以实现模块化和信息隐藏。通过使用闭包，可以避免全局命名空间污染，提供更好的封装性和安全性。")]),t._v(" "),n("p",[t._v("以下是一个简单的示例展示了闭包的用法：")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("outerFunction")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" outerVariable "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("innerFunction")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outerVariable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 内部函数可以访问外部函数的变量")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" innerFunction"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回内部函数")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myClosure "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("outerFunction")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用外部函数并将返回的内部函数赋值给变量")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("myClosure")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用内部函数，输出 'Hello'")]),t._v("\n")])])]),n("p",[t._v("在上面的示例中，"),n("code",[t._v("innerFunction")]),t._v("形成了一个闭包，它可以访问并打印"),n("code",[t._v("outerVariable")]),t._v("变量的值，尽管"),n("code",[t._v("outerFunction")]),t._v("已经执行完毕。通过将"),n("code",[t._v("innerFunction")]),t._v("返回并赋值给"),n("code",[t._v("myClosure")]),t._v("变量，我们可以在外部调用闭包并访问其内部变量。")]),t._v(" "),n("p",[t._v("需要注意的是，过度滥用闭包可能会导致内存泄漏和性能问题，因为闭包会持有对外部作用域的引用，使得这些作用域中的变量无法被垃圾回收。因此，在使用闭包时需要注意合理的使用和释放，避免不必要的资源占用。")])])}),[],!1,null,null,null);n.default=e.exports}}]);